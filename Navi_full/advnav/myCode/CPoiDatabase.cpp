/* Generated by Together */

#include "CPoiDatabase.h"
#include "CPOI.h"
#include "CWaypoint.h"

#include <iostream>
using namespace std;

CPoiDatabase::CPoiDatabase(){

}

void CPoiDatabase::addPoi(CPOI const& poi) {
	addToDB(poi);
	//add POI to POI Database
	//m_PoiMap.insert (pair<string,CPOI>(poi.getName(),poi));

}

CPOI* CPoiDatabase::getPointerToPoi(string name){

	return getPointerToDB(name);

	// checks for POI name in POI database and returns pointer to matching POI
	// parameter name : holds a POI name which is to be checked

/*	CPOI* p2Poi;  //Creating a Pointer of type CPOI

	p2Poi=NULL;  //Pointer value to NULL, if unaltered => POI not in database

	//checking POI database for POI - with passed parameter name -
	m_it = m_PoiMap.find(name);

	// find function returns map-end if no POI match found

	if(m_it != m_PoiMap.end())
	{
		// POI with same name present in POI Database
		p2Poi = &(m_it->second);
	}

	else
	{
		// Code get executed if POI not present in POI Database
		cout<<endl<<"ERROR: Could not find POI in the Database"<<endl;
	}

	//returning pointer to the POI - with passed parameter name - or NULL if POI not in POI data pool
	return(p2Poi);*/
}

void CPoiDatabase::print(){
    int i =0;
	//printing all elements in POI Database map container
	for(m_it = m_PoiMap.begin(); m_it != m_PoiMap.end(); ++m_it )
	{
		cout<<endl<<++i<<endl;
		m_it->second.print(1);
	}
	//printDB();
}

void CPoiDatabase::sharePoiDBmembers(map<string, CPOI>& sharetPoiMap,map<string, CPOI>::iterator& ShareIt) const {

	//Sharing POI database for persistent class use
	sharetPoiMap = m_PoiMap;
	ShareIt = m_it;
}

void CPoiDatabase::clearPoiMap() {

	//Clear database contents
	m_PoiMap.clear();
}

map<std::string,CPOI>* CPoiDatabase::getMapPOI() {
	return getMap();
}
