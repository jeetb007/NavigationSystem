/* Generated by Together */

/**
 * @file name: CRoute.h *
 *
 */

#ifndef CROUTE_H
#define CROUTE_H
#include "CPoiDatabase.h"
#include "CWpDatabase.h"
#include "CPOI.h"
class CWaypoint;

#include <list>
#include <vector>
using std::list;

using namespace std;
class CRoute {
public:
	/**
	 * CRoute - CRoute constructor
	 */
	CRoute();

	/**
	 * CRoute - CRoute destructor
	 */
	~CRoute();

	/**
	 * CRoute - CRoute copy constructor
	 * @param origin - from which data copy is to be done
	 */
	CRoute(CRoute const & origin);

	/**
	 * connectToPoiDatabase - linking with POI database
	 * @param pPoiDB - pointer to PoiDatabase
	 */
	void connectToPoiDatabase(CPoiDatabase* pPoiDB);

	/**
	 * connectToWpDatabase - linking with Waypoint database
	 * @param pWpDB - pointer to Waypoint Database
	 */
	void connectToWpDatabase(CWpDatabase* pWpDB);

	/**
	 * addWaypoint - add waypoint to route
	 * @param name - name of waypoint to be added
	 */
	void addWaypoint(string name);

	/**
	 * addPoi- add POI to route
	 * @param namePoi - name of POI to be added
	 * @param afterWp - POI to be added after Waypoint afterWp in route
	 */
	void addPoi(string namePoi, string afterWp);

	/**
	 * getDistanceNextPoi - resolving the closest POI from current position
	 * @param wp - holds current position GPS value
	 * @param poi - returns POI pointer to nearest POI
	 * @return - distance to nearest POI
	 */
	double getDistanceNextPoi(CWaypoint const & wp, CPOI& poi);

	/**
	 * print the route details, number and list of POIs, Waypoints
	 */
	void print();

	/**
	 * operator= - Implementing assignment operator for Route     *
	 */
	void operator= (CRoute R1);

	/**
	 * operator+= - add poi extension to add waypoint or poi without any constraints to route
	 * @param name - POI or waypoint name
	 */
	void operator+=(string name);

	/**
	 * operator+ - adding to routes together
	 * @param object
	 * @return added routes
	 */
	CRoute operator+(CRoute object);

//	CWpDatabase* getPWpDatabase();
//	CPoiDatabase* getPPoiDatabase();
	void clearRoute();

	vector<const CWaypoint*> getRoute() const;

private:
	unsigned int m_WpCount;             // number of Waypoint in route
	unsigned int m_PoiCount;// number of POI in route
	CPoiDatabase* m_pPoiDatabase;// for connecting to POI database
	CWpDatabase* m_pWpDatabase;// for connecting to Waypoint database
	list <CWaypoint*> m_RouteList;// Route list
	list <CWaypoint*>::iterator m_it;// Route list iterator
};
  // namespace std
#endif //CROUTE_H

