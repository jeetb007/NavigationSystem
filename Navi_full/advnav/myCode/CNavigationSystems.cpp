/* Generated by Together */

#include "CNavigationSystems.h"

#include <iostream>

#include "CJsonPersistence.h"

CNavigationSystems::CNavigationSystems(){

	// Creating multiple POI instances
	CPOI oDelhiAirport(Airport, "Delhi Airport", "International  Airport", 49.8, 8.65325);
	CPOI oHochschuleParking(Parking, "Hochschule Parking", "only for students", 10, 20);
	CPOI oGeorge(Church, "St. George", "Roman catholic church", 32.9021, 40.7868);

	CPOI oDeutscheBankATM(ATM, "Deutsche Bank ATM", "No service charge for other Bank cards", 10.7, 32);
	CPOI oTUDParking(Parking, "TUD Parking", "only for student/lecturers", 10, 20.234);
	CPOI oDarmstadthauptbahnhof(RailwayStation, "Darmstadt hauptbahnhof", "hauptbahnhof", 32.01, 40.00);

	CPOI oDarmstadtCityHospital(Hospital, "Darmstadt City Hospital", "Public undertaking", 41, 22);
	CPOI oDeutscheBank(Bank, "Deutsche Bank", "Regional office", 80, 20);
	CPOI oSHELL(GasStation, "SHELL", "Company run Gas station", 12.9, 40.71);

	//for testing same name
	CPOI oDarmstadt(TouristSpot, "darmstadt", "4 Euro entry, free for kids under 12 ", 11.30, 32);
	CPOI oFrankensteinCastle(TouristSpot, "Frankenstein Castle", "only for students", 10, 20);
	CPOI oOberwaldHauselake(TouristSpot, "Oberwald Hause lake", "Swim on your risk", 31.9021, 80.7868);

	//adding POI to POI Database
	m_PoiDatabase.addPoi(oDelhiAirport);
	m_PoiDatabase.addPoi(oHochschuleParking);
	m_PoiDatabase.addPoi(oGeorge);
	m_PoiDatabase.addPoi(oDeutscheBankATM);
	m_PoiDatabase.addPoi(oTUDParking);
	m_PoiDatabase.addPoi(oDarmstadthauptbahnhof);
	m_PoiDatabase.addPoi(oDarmstadtCityHospital);
	m_PoiDatabase.addPoi(oDeutscheBank);
	m_PoiDatabase.addPoi(oSHELL);
	m_PoiDatabase.addPoi(oDarmstadt);
	m_PoiDatabase.addPoi(oFrankensteinCastle);
	m_PoiDatabase.addPoi(oOberwaldHauselake);

	//Connecting to POI database
	m_route.connectToPoiDatabase(&m_PoiDatabase);

	//Creating Waypoint objects
	CWaypoint amsterdam("amsterdam", 52.3667, 4.9000);
	CWaypoint darmstadt("darmstadt", 49.8667, 8.6500);
	CWaypoint berlin("berlin", 52.5167, 13.3833);
	CWaypoint tokio("tokio", 35.6833, 139.683);

	//adding Waypoints to Waypoint Database
	m_WpDatabase.addWaypoint(amsterdam);
	m_WpDatabase.addWaypoint(darmstadt);
	m_WpDatabase.addWaypoint(berlin);
	m_WpDatabase.addWaypoint(tokio);
	//m_WpDatabase.print();

	//Connecting to Waypoint database
	m_route.connectToWpDatabase(&m_WpDatabase);

}


void CNavigationSystems::run(){

	// function run - system visibility

	enterRoute(); //calls enterRoute function

	printRoute(); //calls printRoute function

//	printDistanceCurPosNextPoi(); //calls printDistanceCurPosNextPoi function

	// checking for persistent data
	CJsonPersistence obj;

	obj.setMediaName("CNavigation-wp-poi.json");
	//m_WpDatabase.print();
	//m_PoiDatabase.print();
//	// Write to persistent data
	bool w;
	w = obj.writeData(m_WpDatabase, m_PoiDatabase);
	if (w == false)
	{
		cout << "Error writing into persistent storage" << endl;
	}
	else
	{
		cout << "Writing into persistent storage is successful" << endl;
	}

	// Read from persistent storage - Mode REPLACE and MERGE
	bool r;
	r = obj.readData(m_WpDatabase, m_PoiDatabase,CJsonPersistence::MERGE);

	if (r == false)
	{
		cout <<endl<< "Warning : Reading from persistent storage completed with errors" << endl;
	}

//	cout<<endl<<"=========== Waypoint Database ==================";
	m_WpDatabase.print();
//	cout<<endl<<"============= POI Database =====================";
	m_PoiDatabase.print();

}

void CNavigationSystems::printDistanceCurPosNextPoi(){

	 double distToNextPoi;  //To store minimum distance from current position to nearest POI in route
	 CPOI poi;              //CPOI object that get updated address of nearest POI in route
	 CWaypoint readGPS;     //To store current lat long values

	 //Call getCurrentPosition() and store current lat long values to object readGPS
	 readGPS = m_GPSSensor.getCurrentPosition();

	 //Call getDistanceNextPoi which returns min distance, return of -1 indicates missing POI database
     distToNextPoi = m_route.getDistanceNextPoi(readGPS, poi);

     //Gaurd condition to avoid printing of distance and details of nearest POI
     if(distToNextPoi==-1)
     {
    	 //code gets executed if POI database is missing, validated by distToNextPoi value
    	 cout<<"POI missing, distance to next POI cannot be calculated"<<endl;
     }

     else
     {
      //Printing distance and details of nearest POI in route
	  cout <<endl<<"Distance to next POI : " << distToNextPoi << endl;
	  poi.print(DMS);
     }
}

void CNavigationSystems::enterRoute(){

	//adding Waypoints to Route
	m_route.addWaypoint("berlin");
	m_route.addWaypoint("darmstadt");
	m_route.addWaypoint("berlin");

//	//+= operator overloading
//	m_route+="tokio";
//	m_route+="Delhi Airport";
//	m_route+="darmstadt";

	//adding POI to Route. POI database already linked in CNavigationSystem Constructor
//	m_route.addPoi("Delhi Airport","berlin");
//	m_route.addPoi("Delhi Airport","bark");
//	m_route.addPoi("Delhi Airport","berlin");
//	m_route.addPoi("darmstadt","darmstadt");
//	m_route.addPoi("Hochschule Parking","darmstadt");
//	m_route.addPoi("Hochschule Parking","berlin");
//	m_route.addPoi("Delhi Airport","berlin");

	//for testing operator + function
	CRoute CR,CR2;
	CR.connectToPoiDatabase(&m_PoiDatabase);
	CR.connectToWpDatabase(&m_WpDatabase);
	CR.addWaypoint("tokio");
//	CR.addWaypoint("berlin");
	CR2=CR+m_route;

//	CR2.print();

	//Testing Copy constructor
//	CRoute m_route2(m_route);
//	m_route2 = m_route;
//	m_route2.addPoi("Delhi Airport","berlin");
//	m_route2.print();

}

void CNavigationSystems::printRoute(){

	//Printing route details - number and list of POIs, Waypoints
	m_route.print();

}
